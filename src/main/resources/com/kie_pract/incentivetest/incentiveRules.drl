package com.kie_pract.incentivetest;

import java.lang.Math.*;

//////////////// Lead Owner /////////////////
rule "CalculateIncentiveLeadOwner1"
ruleflow-group "Test"
salience 3
when
//$R:IncentiveTest(  $Z:type_of , $H:incentiveEligible  , $M:incentTypes,$M.equals("Primary"),$Z.equals("Multiple Of Payments")   ,$H.equals("Yes"),$D:(payment*(value/100)))

$R:IncentiveTest( $Z:type_of,$W:CTC , $H:incentiveEligible  , $M:incentTypes,$M.equals("Primary"),$Z.equals("Multiple Of Payments") , based_on.equals("No. of Accounts")  ,$H.equals("Yes"),$D:(payment*value)  )
then
$R.setResults(""+$D);
System.out.println("Lead Owner Incentive: "+$D);
end


rule "CalculateIncentiveLeadOwner2"
ruleflow-group "Test"
salience 3
when
$R:IncentiveTest( $Z:type_of,$W:payment , $H:incentiveEligible  , $M:incentTypes,$M.equals("Primary"),$Z.equals("Multiple Of CTC") , based_on.equals("No. of Accounts")  ,$H.equals("Yes"),$D:(CTC*value)  )
then
$R.setResults(""+$D);
System.out.println("Lead Owner Incentive: "+$D);
end




rule "CalculateIncentiveLeadOwner3"
ruleflow-group "Test"
salience 3
when
//$R:IncentiveTest(  $Z:type_of , $H:incentiveEligible  , $M:incentTypes,$M.equals("Primary"),$Z.equals("Multiple Of Payments")   ,$H.equals("Yes"),$D:(payment*(value/100)))

$R:IncentiveTest( $Z:type_of,$W:CTC , $H:incentiveEligible  , $M:incentTypes,$M.equals("Primary"),$Z.equals("% Of Payments") , based_on.equals("No. of Accounts")  ,$H.equals("Yes"),$D:(value*(payment/100))  )
then
$R.setResults(""+$D);
System.out.println("Lead Owner Incentive: "+$D);
end


rule "CalculateIncentiveLeadOwner4"
ruleflow-group "Test"
salience 3
when
//$R:IncentiveTest(  $Z:type_of , $H:incentiveEligible  , $M:incentTypes,$M.equals("Primary"),$Z.equals("Multiple Of Payments")   ,$H.equals("Yes"),$D:(payment*(value/100)))

$R:IncentiveTest( $Z:type_of,$W:payment , $H:incentiveEligible  , $M:incentTypes,$M.equals("Primary"),$Z.equals("% Of CTC") , based_on.equals("No. of Accounts")  ,$H.equals("Yes"),$D:(value*(CTC/100))  )
then
$R.setResults(""+$D);
System.out.println("Lead Owner Incentive: "+$D);
end



/*

///////////////////  Assistance Lead Owner  ///////////////
rule "CalculateIncentiveAssistanceLeadOwner1"
//ruleflow-group "Test"
salience 3
when
$R:IncentiveTest($Z:type_of ,$H:incentiveEligible  , $M:incentTypes,   $M.equals("Secondary"),$Z.equals("Multiple Of Payments") ,$H.equals("Yes"),$D:(payment*(value/100)))
then
$R.setIncen($D);
System.out.println("Assistance Lead Owner Incentive: "+$D);
end

rule "CalculateIncentiveAssistanceLeadOwner2"
//ruleflow-group "Test"
salience 3
when
$R:IncentiveTest($Z:type_of ,$H:incentiveEligible  , $M:incentTypes,   $M.equals("Secondary"),$Z.equals("Multiple Of Payments") ,$H.equals("Yes"),$D:(payment*(value/100)))
then
$R.setIncen($D);
System.out.println("Assistance Lead Owner Incentive: "+$D);
end


////////////////////  Contract Renewal ///////////////////
rule "CalculateIncentiveContractRenewal"
//ruleflow-group "Test"
salience 3
when
$R:IncentiveTest($H:incentiveEligible  , $M:incentTypes, $M.equals("CR")  ,$H.equals("Yes"),$D:(payment*(1/100)))
then
$R.setIncen($D);
System.out.println("Contract Renewal Incentive: "+$D);
end




rule "CalculateIncentiveNotEligible"
//ruleflow-group "Test"
salience 3
when
$R:IncentiveTest(incentiveEligible.equals("No") )
then
$R.setIncen(0000.00);
System.out.println("Not Eligible for Incentive");
end



rule "CalculateIncentiveNotEligibleLO"
//ruleflow-group "Test"
salience 3
when
$R:IncentiveTest(incentTypes.equals("Primary"),incentiveEligible.equals("No") )
then
$R.setIncen(0000.00);
System.out.println("Not Eligible for Incentive");
end

rule "CalculateIncentiveNotEligibleALO"
//ruleflow-group "Test"
salience 3
when
$R:IncentiveTest(incentTypes.equals("Secondary"),incentiveEligible.equals("No") )
then
$R.setIncen(0000.00);
System.out.println("Not Eligible for Incentive");
end


rule "CalculateIncentiveNotEligibleCR"
//ruleflow-group "Test"
salience 3
when
$R:IncentiveTest(incentTypes.equals("CR"),incentiveEligible.equals("No") )
then
$R.setIncen(0000.00);
System.out.println("Not Eligible for Incentive");
end


*/